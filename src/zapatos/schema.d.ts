/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type userdeletionreason = 'admin_action' | 'bot_detected' | 'reported' | 'user_action';
  export namespace every {
    export type userdeletionreason = ['admin_action', 'bot_detected', 'reported', 'user_action'];
  }

  /* --- tables --- */

  /**
   * **post**
   * - Table in database
   */
  export namespace post {
    export type Table = 'post';
    export interface Selectable {
      /**
      * **post.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('post_id_seq'::regclass)`
      */
      id: number;
      /**
      * **post.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **post.user_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_email: string;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content: string | null;
      /**
      * **post.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **post.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **post.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('post_id_seq'::regclass)`
      */
      id: number;
      /**
      * **post.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **post.user_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_email: string;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content: string | null;
      /**
      * **post.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **post.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **post.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('post_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.user_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **post.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **post.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('post_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **post.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **post.user_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **post.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **post.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **post.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('post_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **post.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **post.user_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      user_email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **post.content**
      * - `text` in database
      * - Nullable, no default
      */
      content?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **post.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **post.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'post_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_credential**
   * - Table in database
   */
  export namespace user_credential {
    export type Table = 'user_credential';
    export interface Selectable {
      /**
      * **user_credential.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_credential_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_credential.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_credential.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **user_credential.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username: string | null;
      /**
      * **user_credential.email_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      email_verified: boolean;
      /**
      * **user_credential.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **user_credential.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
      /**
      * **user_credential.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_deleted: boolean;
    }
    export interface JSONSelectable {
      /**
      * **user_credential.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_credential_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_credential.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_credential.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **user_credential.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username: string | null;
      /**
      * **user_credential.email_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      email_verified: boolean;
      /**
      * **user_credential.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **user_credential.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
      /**
      * **user_credential.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_deleted: boolean;
    }
    export interface Whereable {
      /**
      * **user_credential.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_credential_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.email_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      email_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_credential.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_credential.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_credential_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **user_credential.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_credential.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_credential.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_credential.email_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      email_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **user_credential.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_credential.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_credential.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_credential.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_credential_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_credential.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_credential.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_credential.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_credential.email_verified**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      email_verified?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_credential.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_credential.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_credential.is_deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      is_deleted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_credential_email_key' | 'user_credential_id_username_key' | 'user_credential_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_detail**
   * - Table in database
   */
  export namespace user_detail {
    export type Table = 'user_detail';
    export interface Selectable {
      /**
      * **user_detail.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_detail_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_detail.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_detail.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **user_detail.bio**
      * - `varchar` in database
      * - Nullable, no default
      */
      bio: string | null;
      /**
      * **user_detail.profile_picture**
      * - `varchar` in database
      * - Nullable, no default
      */
      profile_picture: string | null;
      /**
      * **user_detail.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **user_detail.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **user_detail.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_detail_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_detail.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_detail.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **user_detail.bio**
      * - `varchar` in database
      * - Nullable, no default
      */
      bio: string | null;
      /**
      * **user_detail.profile_picture**
      * - `varchar` in database
      * - Nullable, no default
      */
      profile_picture: string | null;
      /**
      * **user_detail.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **user_detail.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **user_detail.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_detail_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_detail.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_detail.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_detail.bio**
      * - `varchar` in database
      * - Nullable, no default
      */
      bio?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_detail.profile_picture**
      * - `varchar` in database
      * - Nullable, no default
      */
      profile_picture?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_detail.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_detail.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_detail.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_detail_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **user_detail.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_detail.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_detail.bio**
      * - `varchar` in database
      * - Nullable, no default
      */
      bio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_detail.profile_picture**
      * - `varchar` in database
      * - Nullable, no default
      */
      profile_picture?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_detail.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_detail.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_detail.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_detail_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_detail.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_detail.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_detail.bio**
      * - `varchar` in database
      * - Nullable, no default
      */
      bio?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_detail.profile_picture**
      * - `varchar` in database
      * - Nullable, no default
      */
      profile_picture?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_detail.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_detail.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_detail_id_email_key' | 'user_detail_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_meta**
   * - Table in database
   */
  export namespace user_meta {
    export type Table = 'user_meta';
    export interface Selectable {
      /**
      * **user_meta.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_meta_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_meta.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_meta.email_verified_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_time: Date | null;
      /**
      * **user_meta.email_verification_queued_time**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      email_verification_queued_time: Date;
      /**
      * **user_meta.email_verification_sent_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verification_sent_time: Date | null;
      /**
      * **user_meta.deletion_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deletion_time: Date | null;
      /**
      * **user_meta.deletion_reason**
      * - `userdeletionreason` in database
      * - Nullable, no default
      */
      deletion_reason: userdeletionreason | null;
      /**
      * **user_meta.last_login_ip**
      * - `cidr` in database
      * - `NOT NULL`, no default
      */
      last_login_ip: c.PgCidr;
      /**
      * **user_meta.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **user_meta.udpated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      udpated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **user_meta.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_meta_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_meta.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user_meta.email_verified_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_time: db.TimestampTzString | null;
      /**
      * **user_meta.email_verification_queued_time**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      email_verification_queued_time: db.TimestampTzString;
      /**
      * **user_meta.email_verification_sent_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verification_sent_time: db.TimestampTzString | null;
      /**
      * **user_meta.deletion_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deletion_time: db.TimestampTzString | null;
      /**
      * **user_meta.deletion_reason**
      * - `userdeletionreason` in database
      * - Nullable, no default
      */
      deletion_reason: userdeletionreason | null;
      /**
      * **user_meta.last_login_ip**
      * - `cidr` in database
      * - `NOT NULL`, no default
      */
      last_login_ip: c.PgCidr;
      /**
      * **user_meta.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **user_meta.udpated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      udpated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **user_meta.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_meta_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.email_verified_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.email_verification_queued_time**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      email_verification_queued_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.email_verification_sent_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verification_sent_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.deletion_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deletion_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.deletion_reason**
      * - `userdeletionreason` in database
      * - Nullable, no default
      */
      deletion_reason?: userdeletionreason | db.Parameter<userdeletionreason> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, userdeletionreason | db.Parameter<userdeletionreason> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.last_login_ip**
      * - `cidr` in database
      * - `NOT NULL`, no default
      */
      last_login_ip?: c.PgCidr | db.Parameter<c.PgCidr> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCidr | db.Parameter<c.PgCidr> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_meta.udpated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      udpated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_meta.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_meta_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user_meta.email_verified_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.email_verification_queued_time**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      email_verification_queued_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.email_verification_sent_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verification_sent_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.deletion_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deletion_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.deletion_reason**
      * - `userdeletionreason` in database
      * - Nullable, no default
      */
      deletion_reason?: userdeletionreason | db.Parameter<userdeletionreason> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.last_login_ip**
      * - `cidr` in database
      * - `NOT NULL`, no default
      */
      last_login_ip: c.PgCidr | db.Parameter<c.PgCidr> | db.SQLFragment;
      /**
      * **user_meta.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user_meta.udpated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      udpated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_meta.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_meta_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user_meta.email_verified_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verified_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.email_verification_queued_time**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      email_verification_queued_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.email_verification_sent_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      email_verification_sent_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.deletion_time**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deletion_time?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.deletion_reason**
      * - `userdeletionreason` in database
      * - Nullable, no default
      */
      deletion_reason?: userdeletionreason | db.Parameter<userdeletionreason> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, userdeletionreason | db.Parameter<userdeletionreason> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.last_login_ip**
      * - `cidr` in database
      * - `NOT NULL`, no default
      */
      last_login_ip?: c.PgCidr | db.Parameter<c.PgCidr> | db.SQLFragment | db.SQLFragment<any, c.PgCidr | db.Parameter<c.PgCidr> | db.SQLFragment>;
      /**
      * **user_meta.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_meta.udpated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      udpated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_meta_id_email_key' | 'user_meta_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = post.Table | user_credential.Table | user_detail.Table | user_meta.Table;
    export type Selectable = post.Selectable | user_credential.Selectable | user_detail.Selectable | user_meta.Selectable;
    export type JSONSelectable = post.JSONSelectable | user_credential.JSONSelectable | user_detail.JSONSelectable | user_meta.JSONSelectable;
    export type Whereable = post.Whereable | user_credential.Whereable | user_detail.Whereable | user_meta.Whereable;
    export type Insertable = post.Insertable | user_credential.Insertable | user_detail.Insertable | user_meta.Insertable;
    export type Updatable = post.Updatable | user_credential.Updatable | user_detail.Updatable | user_meta.Updatable;
    export type UniqueIndex = post.UniqueIndex | user_credential.UniqueIndex | user_detail.UniqueIndex | user_meta.UniqueIndex;
    export type Column = post.Column | user_credential.Column | user_detail.Column | user_meta.Column;
  
    export type AllBaseTables = [post.Table, user_credential.Table, user_detail.Table, user_meta.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [post.Table, user_credential.Table, user_detail.Table, user_meta.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "post": post.Selectable;
    "user_credential": user_credential.Selectable;
    "user_detail": user_detail.Selectable;
    "user_meta": user_meta.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "post": post.JSONSelectable;
    "user_credential": user_credential.JSONSelectable;
    "user_detail": user_detail.JSONSelectable;
    "user_meta": user_meta.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "post": post.Whereable;
    "user_credential": user_credential.Whereable;
    "user_detail": user_detail.Whereable;
    "user_meta": user_meta.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "post": post.Insertable;
    "user_credential": user_credential.Insertable;
    "user_detail": user_detail.Insertable;
    "user_meta": user_meta.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "post": post.Updatable;
    "user_credential": user_credential.Updatable;
    "user_detail": user_detail.Updatable;
    "user_meta": user_meta.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "post": post.UniqueIndex;
    "user_credential": user_credential.UniqueIndex;
    "user_detail": user_detail.UniqueIndex;
    "user_meta": user_meta.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "post": post.Column;
    "user_credential": user_credential.Column;
    "user_detail": user_detail.Column;
    "user_meta": user_meta.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "post": post.SQL;
    "user_credential": user_credential.SQL;
    "user_detail": user_detail.SQL;
    "user_meta": user_meta.SQL;
  }[T];

}
